cmake_minimum_required(VERSION 2.6) 

set ( TARGET_NAME #PROJECTNAME )

# Declare project file
project(${TARGET_NAME} C CXX)

# set top level directory
set ( TARGET_DIR "#CURRENT_SOURCE_DIR" )
set ( ENJON_DIR "#ENJON_DIRECTORY" )
set ( ENJON_INC ${ENJON_DIR}/Include/ )
set ( ENJON_SRC ${ENJON_DIR}/Source/ )
set ( ENJON_BUILD_DIR ${ENJON_DIR}/Build/ )
set ( ENJON_GENERATED_DIR ${ENJON_BUILD_DIR}/Generator/Linked/ )
set ( TARGET_BUILD_DIR #PROJECT_BUILD_DIR )
set ( TARGET_ROOT_DIR #PROJECT_ROOT_DIR )
set ( PROJECT_GEN_DIR ${TARGET_ROOT_DIR}/Build/Generator/Linked/ )
set ( TARGET_INTERMEDIATE_DIR ${TARGET_BUILD_DIR}/ )
set ( TARGET_SOURCE_DIR ${TARGET_ROOT_DIR}/Source/ )
set ( TARGET_INC_DIR ${TARGET_ROOT_DIR}/Include/ )

# Set build directory for solution
set (EXECUTABLE_OUTPUT_PATH ${TARGET_BUILD_DIR})

# Turn on ability to create folders
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Set compiler flags and build options
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /W1")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MD /W1")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /W1")

message("cxx FLgs:" ${CMAKE_CXX_FLAGS})

# Add include directories
include_directories(
					${TARGET_DIR}/Source
					${TARGET_SOURCE_DIR}
					${TARGET_INC_DIR}
					${ENJON_DIR}/ThirdParty/Build/Include
					${ENJON_DIR}/Source
					${ENJON_INC}
					)

# Add lib directories
link_directories(${ENJON_DIR}/ThirdParty/Build/Libraries/Release)
link_directories(${ENJON_DIR}/ThirdParty/Build/Libraries/Debug)
link_directories(${ENJON_DIR}/Build/Debug)
link_directories(${ENJON_DIR}/Build/Release)

set(TARGET_GENERATED_DIR ${TARGET_BUILD_DIR}/Generator/Linked/)

file( 
		GLOB_RECURSE TARGET_SOURCES
		"${TARGET_INC_DIR}/*.h"
		"${TARGET_INC_DIR}/*.h"
		"${TARGET_INC_DIR}/*.c"
		"${TARGET_SOURCE_DIR}/*.cpp"
	)

set(
		ALL_SRC 
		${TARGET_SOURCES}
		${PROJECT_GEN_DIR}/${TARGET_NAME}_Generated.cpp
		${TARGET_INTERMEDIATE_DIR}/main.cpp
		${TARGET_INTERMEDIATE_DIR}/Defines.h
	)

file(
		GLOB_RECURSE REFLECTION_INCLUDES
		"${TARGET_INC_DIR}/*.h"
	)

add_executable(${TARGET_NAME} ${ALL_SRC}) 

add_definitions(-DENJON_STANDALONE_APPLICATION)

# Link libraries to target
target_link_libraries( ${TARGET_NAME} debug Enjond.lib optimized Enjon.lib )
target_link_libraries( ${TARGET_NAME} debug Opengl32.lib optimized Opengl32.lib ) 
target_link_libraries( ${TARGET_NAME} debug SDL2_d.lib optimized SDL2.lib )
target_link_libraries( ${TARGET_NAME} debug SDL2main_d.lib optimized SDL2main.lib )
target_link_libraries( ${TARGET_NAME} debug glew32_d.lib optimized glew32.lib )
target_link_libraries( ${TARGET_NAME} debug glew32s_d.lib optimized glew32s.lib )
target_link_libraries( ${TARGET_NAME} debug freetype_d.lib optimized freetype.lib )
target_link_libraries( ${TARGET_NAME} debug Bullet3Collision_d.lib optimized Bullet3Collision.lib )
target_link_libraries( ${TARGET_NAME} debug Bullet3Dynamics_d.lib optimized Bullet3Dynamics.lib )
target_link_libraries( ${TARGET_NAME} debug Bullet3Common_d.lib optimized Bullet3Common.lib )
target_link_libraries( ${TARGET_NAME} debug LinearMath_d.lib optimized LinearMath.lib )
target_link_libraries( ${TARGET_NAME} debug BulletDynamics_d.lib optimized BulletDynamics.lib )
target_link_libraries( ${TARGET_NAME} debug BulletCollision_d.lib optimized BulletCollision.lib )
target_link_libraries( ${TARGET_NAME} debug fmt_d.lib optimized fmt.lib )
target_link_libraries( ${TARGET_NAME} debug liblz4_d.lib optimized liblz4.lib ) 
target_link_libraries( ${TARGET_NAME} debug assimp-vc140-mt.lib optimized assimp-vc140-mt.lib ) 

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${TARGET_BUILD_DIR})

set_target_properties(
						${TARGET_NAME} 
						PROPERTIES 
						LINKER_LANGUAGE CXX 
					)

# List of necessary DLLs 
set(
		DLL_LIST

		SDL2.dll
		freetype6.dll
		glew32.dll
		assimp.dll
		assimp_d.dll
	)

# List of build directories
set(
		BUILD_DIRECTORIES
		${TARGET_BUILD_DIR}
	)

# Install directories
foreach(dir ${BUILD_DIRECTORIES})
	if (NOT IS_DIRECTORY ${dir})
		file(MAKE_DIRECTORY ${dir})
		execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${dir})
	endif()
endforeach(dir)

