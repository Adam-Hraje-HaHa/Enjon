{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Playercon",
				"PlayerControllers	(PlayerControllerSystem.h)"
			],
			[
				"Renderers",
				"Renderers	(ComponentSystems.cpp)"
			],
			[
				"salarypara",
				"salaryParameter"
			],
			[
				"salaryp",
				"salaryParameter"
			],
			[
				"bullets",
				"bullets_"
			],
			[
				"glClearColor",
				"glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)	void"
			],
			[
				"Upadte",
				"Update(const std::vector<std::string> &levelData, std::vector<Human *> &humans, std::vector<Zombie *> &zombies)	void"
			],
			[
				"cam",
				"camera_"
			],
			[
				"spee",
				"speed_"
			],
			[
				"bulletsp",
				"bulletSpeed"
			],
			[
				"bulletda",
				"bulletDamage"
			],
			[
				"speed",
				"speed"
			],
			[
				"buletd",
				"bulletDamage"
			],
			[
				"sprea",
				"spread_"
			],
			[
				"bulletspers",
				"bulletsPerShot_"
			],
			[
				"positio",
				"position_"
			],
			[
				"Level",
				"Level(const std::string &fileName)	constructor"
			],
			[
				"colorp",
				"colorProgram_	int"
			],
			[
				"Spark",
				"Spark	namespace"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 80955,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ECS/CollisionSystem.cpp",
			"settings":
			{
				"buffer_size": 31726,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/ECS/Components.h",
			"settings":
			{
				"buffer_size": 4567,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/SpatialHash.h",
			"settings":
			{
				"buffer_size": 1374,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/ECS/CollisionSystem.h",
			"settings":
			{
				"buffer_size": 1459,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/ECS/Renderer2DSystem.h",
			"settings":
			{
				"buffer_size": 591,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ECS/Transform3DSystem.cpp",
			"settings":
			{
				"buffer_size": 14104,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/ECS/PlayerControllerSystem.h",
			"settings":
			{
				"buffer_size": 992,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/ECS/Masks.h",
			"settings":
			{
				"buffer_size": 1107,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ECS/ComponentSystems.cpp",
			"settings":
			{
				"buffer_size": 4833,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/C++Projects/VS/3DEnjon/src/FrameBufferObject.cpp",
			"settings":
			{
				"buffer_size": 5293,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Level.cpp",
			"settings":
			{
				"buffer_size": 7128,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/Level.h",
			"settings":
			{
				"buffer_size": 2516,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"ECS/Animation2DSystem.h\"\n#include \"ECS/AttributeSystem.h\"\n#include \"ECS/Transform3DSystem.h\"\n#include \"ECS/InventorySystem.h\"\n#include \"ECS/Renderer2DSystem.h\"\n#include \"ECS/PlayerControllerSystem.h\"\n#include \"ECS/EntityFactory.h\"\n\n#include <Graphics/Camera2D.h>\n#include <Graphics/SpriteSheetManager.h>\n#include <IO/ResourceManager.h>\n\n#include <iostream>\n\nnamespace ECS { namespace Systems { namespace Animation2D {\n\n	//enJon sux dick\n\n	// TESTING THIS ONLY\n	static EntityAnimationState PlayerState = EntityAnimationState::WALKING;\n	static Weapons CurrentWeapon = Weapons::DAGGER;\n	bool HitFrame = false;\n	\n	void SetPlayerState(EntityAnimationState State)\n	{\n		PlayerState = State;\n	}\n\n	EntityAnimationState GetPlayerState() { return PlayerState; }\n\n	void SetCurrentWeapon(Weapons CW)\n	{\n		CurrentWeapon = CW;\n	}\n\n	struct Animation2DSystem* NewAnimation2DSystem(struct EntityManager* Manager)\n	{\n		struct Animation2DSystem* System = new Animation2DSystem;\n		System->Manager = Manager;\n		return System;\n	}\n	\n	void Update(struct EntityManager* Manager)\n	{\n		// Attack speed\n		// TODO(John): Make this dependent on equipped weapon and player stats\n		static float AttackSpeed = 1.0f;\n\n		// Get System\n		struct Animation2DSystem* System = Manager->Animation2DSystem;\n		// Loop through all entities with animations\n		for (eid32 e = 0; e < Manager->MaxAvailableID; e++)\n		{\n			static float damaged_counter = 0.0f;\n\n			Component::HealthComponent* HealthComponent = &Manager->AttributeSystem->HealthComponents[e];\n			// Change colors based on health	\n			if (Manager->AttributeSystem->Masks[e] & Masks::Type::AI)\n			{\n				auto* RS = &Manager->Renderer2DSystem->Renderers[e];\n				if (HealthComponent->Health <= 50.0f) RS->Color = Enjon::Graphics::RGBA16_Orange();\n				if (HealthComponent->Health <= 20.0f) RS->Color = Enjon::Graphics::RGBA16_Red();\n				else RS->Color = Enjon::Graphics::RGBA16_White();\n			}\n\n			// If has an animation component\n			if (Manager->Masks[e] & COMPONENT_ANIMATION2D)\n			{\n				if (Manager->AttributeSystem->Masks[e] & Masks::GeneralOptions::DAMAGED)\n				{\n					Manager->Renderer2DSystem->Renderers[e].Color = Enjon::Graphics::RGBA16(100.0f, 0.0f, 0.0f, 100.0f);  // damaged color for now \n					damaged_counter += 0.1f;\n					if (damaged_counter >= 0.5f)\n					{\n						Manager->Renderer2DSystem->Renderers[e].Color = Enjon::Graphics::RGBA16_White();  \n						Manager->AttributeSystem->Masks[e] &= ~Masks::GeneralOptions::DAMAGED;\n						damaged_counter = 0.0f;\n					}						\n				}\n\n				// If is a player\n				if (Manager->Masks[e] & COMPONENT_PLAYERCONTROLLER)\n				{\n					// Get necessary items\n					Component::Animation2D* AnimationComponent = &Manager->Animation2DSystem->Animations[e];\n					Transform3DSystem* TransformSystem = Manager->TransformSystem;\n					Enjon::Math::Vec2* ViewVector = &TransformSystem->Transforms[e].ViewVector;\n					Enjon::Math::Vec2* AttackVector = &TransformSystem->Transforms[e].AttackVector;\n					Enjon::Math::Vec3* Velocity = &TransformSystem->Transforms[e].Velocity;\n					Enjon::Math::Vec3* Position = &TransformSystem->Transforms[e].Position;\n					Enjon::uint32* BeginningFrame = &AnimationComponent->BeginningFrame;\n					Enjon::uint32* SetStart = &AnimationComponent->SetStart;\n					const Animation* CurrentAnimation = AnimationComponent->CurrentAnimation;\n\n					// Get what the current animation is based on the player state\n					switch(PlayerState)\n					{\n						case EntityAnimationState::WALKING: 	CurrentAnimation = AnimationManager::GetAnimation(\"Player\", \"walk\");	break;\n						case EntityAnimationState::ATTACKING:\n							switch(CurrentWeapon)\n							{\n								case Weapons::DAGGER: 	CurrentAnimation = AnimationManager::GetAnimation(\"Player\", \"attack_dagger\"); break;\n								case Weapons::BOW: 		CurrentAnimation = AnimationManager::GetAnimation(\"Player\", \"attack_bow\"); break;\n								case Weapons::AXE: 		CurrentAnimation = AnimationManager::GetAnimation(\"Player\", \"attack_axe\"); break;\n								default: 				CurrentAnimation = AnimationManager::GetAnimation(\"Player\", \"attack_dagger\"); break;\n							}\n							break;\n					}\n\n					// Setting animation beginning frame based on view vector\n					if (PlayerState == EntityAnimationState::ATTACKING && !(*SetStart))\n					{\n						// Set spritesheet\n						if (CurrentWeapon == Weapons::AXE) AnimationComponent->Sheet = Enjon::Graphics::SpriteSheetManager::GetSpriteSheet(\"PlayerSheet2\");\n						else AnimationComponent->Sheet = Enjon::Graphics::SpriteSheetManager::GetSpriteSheet(\"PlayerSheet\");\n\n						// Get direction to mouse\n						Enjon::Math::Vec2 MousePos = Manager->PlayerControllerSystem->PlayerControllers[e].Input->GetMouseCoords();\n						Manager->Camera->ConvertScreenToWorld(MousePos);\n\n						if (MousePos.x <= Position->x)\n						{\n							*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::NW]; \n							*SetStart = TRUE; \n							if (Velocity->x != 0.0f || Velocity->y != 0.0f && CurrentWeapon != Weapons::BOW) *AttackVector = *ViewVector; \n						}\n						else if (MousePos.x > Position->x)  \n						{\n							*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::NE]; \n							*SetStart = TRUE; \n							if (Velocity->x != 0.0f || Velocity->y != 0.0f && CurrentWeapon != Weapons::BOW) *AttackVector = *ViewVector; \n						}\n					\n						// Set currentframe to beginning frame\n						AnimationComponent->CurrentFrame = 0;\n					}\n\n					// Set beginning frame based on view vector\n					if (PlayerState == EntityAnimationState::WALKING || PlayerState == EntityAnimationState::IDLE)\n					{\n						AnimationComponent->Sheet = Enjon::Graphics::SpriteSheetManager::GetSpriteSheet(\"PlayerSheet\");\n\n						if		(*ViewVector == NORTHWEST)		*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::NW];\n						else if (*ViewVector == NORTHEAST)		*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::NE];\n						else if (*ViewVector == EAST)			*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::E];\n						else if (*ViewVector == WEST)			*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::W];\n						else if (*ViewVector == NORTH)			*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::N];\n						else if (*ViewVector == SOUTH)			*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::S];\n						else if (*ViewVector == SOUTHEAST)		*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::SE];\n						else if (*ViewVector == SOUTHWEST)		*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::SW];\n						else									*BeginningFrame = CurrentAnimation->Profile->Starts[Orientation::NW];\n					}\n\n					// NOTE(John): Leave if Idle, for now\n					if (PlayerState != EntityAnimationState::ATTACKING && Velocity->x == 0.0f && Velocity->y == 0.0f) return;\n\n					// Animation\n					if (PlayerState == EntityAnimationState::ATTACKING) \n					{\n						if (CurrentWeapon == Weapons::BOW) AttackSpeed = 10.0f;\n						else AttackSpeed = 1.0f;\n						AnimationComponent->AnimationTimer += CurrentAnimation->AnimationTimerIncrement * AttackSpeed;\n					}\n					else AnimationComponent->AnimationTimer += CurrentAnimation->AnimationTimerIncrement;\n					if (AnimationComponent->AnimationTimer >= CurrentAnimation->Profile->Delays[AnimationComponent->CurrentFrame % CurrentAnimation->Profile->FrameCount])\n					{\n						// Increase current frame\n						AnimationComponent->CurrentFrame++;\n\n						Enjon::uint32 ActiveFrame = AnimationComponent->CurrentFrame + *BeginningFrame;\n\n						// Reset timer\n						AnimationComponent->AnimationTimer = 0.0f;\n\n						// Check for hit frame if attacking\n						if (PlayerState == EntityAnimationState::ATTACKING)\n						{\n							eid32 Weapon = Manager->InventorySystem->Inventories[e].WeaponEquipped;\n							eid32 id = Manager->InventorySystem->Inventories[e].WeaponEquipped;\n\n							Enjon::Math::Vec2 MousePos = Manager->PlayerControllerSystem->PlayerControllers[e].Input->GetMouseCoords();\n							Manager->Camera->ConvertScreenToWorld(MousePos);\n							Enjon::Math::Vec2 Pos = Manager->TransformSystem->Transforms[id].Position.XY();\n\n							// Find vector between the two and normalize\n							static Enjon::Math::Vec2 AttackVelocity;\n							// AttackVelocity = Enjon::Math::Vec2::Normalize(MousePos - Enjon::Math::Vec2(Pos.x + 32.0f, Pos.y + 32.0f));\n\n							if (ActiveFrame == *BeginningFrame + 1)\n							{\n								// Activate collision with dagger \"hit frame\"\n								if (CurrentWeapon == Weapons::DAGGER || CurrentWeapon == Weapons::AXE)\n								{\n									AttackVelocity = Enjon::Math::Vec2::Normalize(MousePos - Enjon::Math::Vec2(Pos.x + 32.0f, Pos.y + 32.0f));\n\n									// Make Weapon visible and collidable\n									Manager->Masks[Weapon] |= (COMPONENT_TRANSFORM3D);\n\n									float speed = 50.0f;\n\n									// Set attack vector of player to this velocity\n									int Mult = 1.0f;\n									Enjon::Math::Vec2 AttackVector;\n									// X < 0\n									if (AttackVelocity.x < 0 && AttackVelocity.x >= -0.3f) AttackVector.x = 0.0f;\n									else if (AttackVelocity.x < 0 && AttackVelocity.x < -0.3f) AttackVector.x = -1.0f;\n									// X > 0\n									if (AttackVelocity.x >= 0 && AttackVelocity.x < 0.5f) AttackVector.x = 0.0f;\n									else if (AttackVelocity.x >= 0 && AttackVelocity.x >= 0.5f) AttackVector.x = 1.0f;\n									// Y < 0\n									if (AttackVelocity.y < 0 && AttackVelocity.y > -0.3f) AttackVector.y = 0.0f;\n									else if (AttackVelocity.y < 0 && AttackVelocity.y <= -0.3f) AttackVector.y = -1.0f;\n									// Y > 0\n									if (AttackVelocity.y >= 0 && AttackVelocity.y < 0.3f) AttackVector.y = 0.0f;\n									else if (AttackVelocity.y >= 0 && AttackVelocity.y >= 0.3f) AttackVector.y = 1.0f;\n\n\n									Manager->TransformSystem->Transforms[e].AttackVector = AttackVector;\n								}\n\n							}\n							if (ActiveFrame == *BeginningFrame + 3 || ActiveFrame == *BeginningFrame + 6)\n							{\n								// Activate collision with dagger \"hit frame\"\n								if (CurrentWeapon == Weapons::DAGGER && ActiveFrame == *BeginningFrame + 3)\n								{\n									// Collision at this point\n									HitFrame = true;\n\n									// Make Weapon visible and collidable\n									eid32 Weapon = Manager->InventorySystem->Inventories[e].WeaponEquipped;\n									Manager->Masks[Weapon] |= (COMPONENT_TRANSFORM3D);\n\n									eid32 id = Manager->InventorySystem->Inventories[e].WeaponEquipped;\n\n									// Move player in direction of attack vector\n									auto Vel = &Manager->TransformSystem->Transforms[e].Velocity;\n									*Vel = 5.0f * Enjon::Math::Vec3(AttackVelocity, 0.0f);\n								}\n\n								if (CurrentWeapon == Weapons::AXE && ActiveFrame == *BeginningFrame + 6)\n								{\n									HitFrame = true;\n									eid32 Weapon = Manager->InventorySystem->Inventories[e].WeaponEquipped;\n									Manager->Masks[Weapon] |= (COMPONENT_TRANSFORM3D);\n\n									auto Vel = &Manager->TransformSystem->Transforms[e].Velocity;\n									*Vel = 6.5f * Enjon::Math::Vec3(AttackVelocity, Vel->z);\n								}\n\n								if (CurrentWeapon == Weapons::BOW && ActiveFrame == *BeginningFrame + 3)\n								{\n									for (auto i = 0; i < 1; i++)\n									{\n										// Create an arrow projectile entity for now...\n										static Enjon::Graphics::SpriteSheet ItemSheet;\n										auto C = Enjon::Graphics::RGBA16(0.0f, 100.0f, 0.0f, 100.0f);\n										C.r += 2.0f;\n										// EM::Vec2 Dim(10.0f + ER::Roll(0, 60), 5.0f);\n										EM::Vec2 Dim(20.0f, 10.0f);\n										if (!ItemSheet.IsInit()) ItemSheet.Init(Enjon::Input::ResourceManager::GetTexture(\"../IsoARPG/Assets/Textures/bluebutton.png\"), Enjon::Math::iVec2(1, 1));\n										eid32 id = Factory::CreateWeapon(Manager, Enjon::Math::Vec3(Position->x + 60.0f, Position->y + 20.0f, 50.0f),\n																  Enjon::Math::Vec2(100.0f, 10.0f), &ItemSheet, (Masks::Type::WEAPON | \n																  												Masks::WeaponOptions::PROJECTILE | \n																  												Masks::GeneralOptions::PICKED_UP | \n																  												Masks::GeneralOptions::COLLIDABLE), \n																  												Component::EntityType::PROJECTILE, \"arrow\", \n																												C);\n										Manager->Masks[id] |= COMPONENT_TRANSFORM3D;\n\n										Manager->TransformSystem->Transforms[id].AABBPadding = EM::Vec2(15);\n\n\n										// Set arrow velocity to normalize: mousepos - arrowpos\n										Enjon::Math::Vec2 MousePos = Manager->PlayerControllerSystem->PlayerControllers[e].Input->GetMouseCoords();\n										Manager->Camera->ConvertScreenToWorld(MousePos);\n										Enjon::Math::Vec2 Pos = Manager->TransformSystem->Transforms[id].Position.XY();\n\n										// // Find vector between the two and normalize\n										Enjon::Math::Vec2 ArrowVelocity = Enjon::Math::Vec2::Normalize(Enjon::Math::IsoToCartesian(MousePos) - Enjon::Math::IsoToCartesian(Pos));\n\n										EM::Vec2 R(1,0);\n										float a = acos(ArrowVelocity.DotProduct(R)) * 180.0f / M_PI;\n										if (ArrowVelocity.y < 0) a *= -1;\n\n										Manager->TransformSystem->Transforms[id].Angle = EM::ToRadians(a);\n\n										auto ArrowX = Position->x;\n										auto ArrowY = Position->y;\n										auto Rad = 5.0f;\n										EM::Vec3* ArrowPos = &Manager->TransformSystem->Transforms[id].Position;\n										*ArrowPos = EM::Vec3(ArrowPos->XY() + Rad * EM::CartesianToIso(EM::Vec2(cos(EM::ToRadians(a)), sin(EM::ToRadians(a)))), 40.0f);\n										\n										// auto RX = Enjon::Random::Roll(-10, 2) / 100.0f;\n										// auto RY = Enjon::Random::Roll(-10, 2) / 100.0f;\n										auto RX = 0.0f;\n										auto RY = 0.0f;\n										ArrowVelocity = Enjon::Math::CartesianToIso(ArrowVelocity);\n\n										float speed = 10.0f;\n\n										// // Fire in direction of mouse\n										Manager->TransformSystem->Transforms[id].VelocityGoal = speed * Enjon::Math::Vec3(ArrowVelocity.x + RX, ArrowVelocity.y + RY, 0.0f);\n										Manager->TransformSystem->Transforms[id].Velocity = speed * Enjon::Math::Vec3(ArrowVelocity.x + RX, ArrowVelocity.y + RY, 0.0f);\n										Manager->TransformSystem->Transforms[id].Velocity.z = -5.0f;\n										Manager->TransformSystem->Transforms[id].BaseHeight = 0.0f;\n\n										// Set attack vector of player to this velocity\n										int Mult = 1.0f;\n										Enjon::Math::Vec2 AttackVector;\n										// X < 0\n										if (ArrowVelocity.x < 0 && ArrowVelocity.x >= -0.3f) AttackVector.x = 0.0f;\n										else if (ArrowVelocity.x < 0 && ArrowVelocity.x < -0.3f) AttackVector.x = -1.0f;\n										// X > 0\n										if (ArrowVelocity.x >= 0 && ArrowVelocity.x < 0.5f) AttackVector.x = 0.0f;\n										else if (ArrowVelocity.x >= 0 && ArrowVelocity.x >= 0.5f) AttackVector.x = 1.0f;\n										// Y < 0\n										if (ArrowVelocity.y < 0 && ArrowVelocity.y > -0.3f) AttackVector.y = 0.0f;\n										else if (ArrowVelocity.y < 0 && ArrowVelocity.y <= -0.3f) AttackVector.y = -1.0f;\n										// Y > 0\n										if (ArrowVelocity.y >= 0 && ArrowVelocity.y < 0.3f) AttackVector.y = 0.0f;\n										else if (ArrowVelocity.y >= 0 && ArrowVelocity.y >= 0.3f) AttackVector.y = 1.0f;\n\n\n										Manager->TransformSystem->Transforms[e].AttackVector = AttackVector;\n\n										// Set up coordinate format\n										Manager->Renderer2DSystem->Renderers[id].Format = EG::CoordinateFormat::ISOMETRIC;	\n\n									}\n								}\n							}\n\n							else \n							{ \n								HitFrame = false;\n								eid32 Weapon = Manager->InventorySystem->Inventories[e].WeaponEquipped;\n								EntitySystem::RemoveComponents(Manager, Weapon, COMPONENT_RENDERER2D | COMPONENT_TRANSFORM3D);\n							} \n\n							// End attacking animation state\n							if (ActiveFrame >= *BeginningFrame + CurrentAnimation->Profile->FrameCount)\n							{\n								AnimationComponent->CurrentFrame = 0;\n								PlayerState = EntityAnimationState::WALKING;\n								*SetStart = FALSE;\n							}\n						}\n\n						// Reset animation	\n						if (ActiveFrame >= *BeginningFrame + CurrentAnimation->Profile->FrameCount) \n						{\n							AnimationComponent->CurrentFrame = 0;\n						}\n					}\n				}\n			}\n		} \n	}\n\n}}}\n\n\n",
			"file": "src/ECS/Animation2DSystem.cpp",
			"file_size": 16225,
			"file_write_time": 131038445275257851,
			"settings":
			{
				"buffer_size": 15883,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ECS/PlayerControllerSystem.cpp",
			"settings":
			{
				"buffer_size": 10432,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ECS/EntityFactory.cpp",
			"settings":
			{
				"buffer_size": 13230,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/ECS/EntityFactory.h",
			"settings":
			{
				"buffer_size": 2057,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/C++Projects/VS/3DEnjon/src/SpriteSheetManager.cpp",
			"settings":
			{
				"buffer_size": 2042,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/C++Projects/VS/3DEnjon/src/ShaderManager.cpp",
			"settings":
			{
				"buffer_size": 3206,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/C++Projects/VS/3DEnjon/shaders/diffuse.v.glsl",
			"settings":
			{
				"buffer_size": 667,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/C++Projects/VS/3DEnjon/shaders/normal.v.glsl",
			"settings":
			{
				"buffer_size": 660,
				"line_ending": "Windows",
				"name": "#version 330 core"
			}
		},
		{
			"file": "/D/C++Projects/VS/3DEnjon/shaders/normal.f.glsl",
			"settings":
			{
				"buffer_size": 491,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/C++Projects/VS/3DEnjon/shaders/deferred.v.glsl",
			"settings":
			{
				"buffer_size": 310,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/C++Projects/VS/3DEnjon/shaders/deferred.f.glsl",
			"settings":
			{
				"buffer_size": 3570,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/User/SDL_Build.sublime-build",
					""
				],
				[
					"Packages/User/SDL_Build.sublime-build",
					"all"
				],
				[
					"Packages/User/SDL_Build.sublime-build",
					"run"
				]
			],
			[
				"Packages/User/SDL_Build.sublime-build",
				"all"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"sub",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Subl",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"packi",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Preferences: Browse Packages"
			]
		],
		"width": 515.0
	},
	"console":
	{
		"height": 113.0,
		"history":
		[
			"sublime.log_input(True)",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/C++Projects/VS/3DEnjon/include",
		"/D/C++Projects/VS/3DEnjon/src",
		"/D/C++Projects/VS/3DEnjon/IsoARPG",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS"
	],
	"file_history":
	[
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/Components.h",
		"/D/C++Projects/VS/3DEnjon/proc/dump.txt",
		"/D/C++Projects/VS/3DEnjon/shaders/no_camera.v.glsl",
		"/D/C++Projects/VS/3DEnjon/shaders/no_camera.f.glsl",
		"/D/Programs/SublimeText/Data/Packages/User/Preferences.sublime-settings",
		"/D/C++Projects/VS/3DEnjon/shaders/framebuffers.v.glsl",
		"/D/C++Projects/VS/3DEnjon/shaders/framebuffers.f.glsl",
		"/D/C++Projects/VS/HQHT/UI/css/style.css",
		"/D/C++Projects/VS/HQHT/UI/index.html",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/Transform3DSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/CollisionSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/SpriteBatch.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/EntityFactory.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/Animation2DSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/profiles/Animations/Player/player.txt",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/AIControllerSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/src/FrameBufferObject.cpp",
		"/D/C++Projects/VS/3DEnjon/src/ShaderManager.cpp",
		"/D/C++Projects/VS/3DEnjon/shaders/basic.v.glsl",
		"/D/C++Projects/VS/3DEnjon/proc/debug.bat",
		"/D/C++Projects/VS/3DEnjon/src/Window.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Defines.h",
		"/D/C++Projects/VS/3DEnjon/shaders/depth.f.glsl",
		"/D/C++Projects/VS/3DEnjon/shaders/depth.v.glsl",
		"/C/Users/John/Desktop/DeferredRenderingSimpleOpenGLTutorial/Deferred Rendering Tutorial/data/deferredShading.frag",
		"/C/Users/John/Desktop/DeferredRenderingSimpleOpenGLTutorial/Deferred Rendering Tutorial/data/deferredShading.vert",
		"/C/Users/John/Desktop/DeferredRenderingSimpleOpenGLTutorial/Deferred Rendering Tutorial/data/deferredRendering.frag",
		"/C/Users/John/Desktop/DeferredRenderingSimpleOpenGLTutorial/Deferred Rendering Tutorial/data/deferredRendering.vert",
		"/D/C++Projects/VS/3DEnjon/shaders/geometrypass.v.glsl",
		"/D/C++Projects/VS/3DEnjon/shaders/geometrypass.f.glsl",
		"/D/C++Projects/VS/3DEnjon/src/GBuffer.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/GBuffer.h",
		"/D/C++Projects/VS/3DEnjon/include/Enjon.h",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/FrameBufferObject.h",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/GLSLProgram.h",
		"/D/C++Projects/VS/3DEnjon/src/GLSLProgram.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Math/Mat4.h",
		"/D/C++Projects/VS/3DEnjon/src/Math/Mat4.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/Level.cpp",
		"/D/C++Projects/VS/3DEnjon/src/DeferredRenderer.cpp",
		"/D/C++Projects/VS/3DEnjon/shaders/normal.f.glsl",
		"/C/Users/John/Desktop/Study.txt",
		"/D/C++Projects/VS/3DEnjon/src/SpriteBatch.cpp",
		"/C/Users/John/Desktop/DeferredRenderingSimpleOpenGLTutorial/Deferred Rendering Tutorial/source/DeferredRendering/FBORenderTexture.cpp",
		"/C/Users/John/Desktop/DeferredRenderingSimpleOpenGLTutorial/Deferred Rendering Tutorial/source/DeferredRendering/DeferredRendering.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/DeferredRenderer.h",
		"/C/Users/John/Desktop/DeferredRenderingSimpleOpenGLTutorial/Deferred Rendering Tutorial/source/DeferredRendering/DeferredRendering.h",
		"/C/Users/John/Desktop/DeferredRenderingSimpleOpenGLTutorial/Deferred Rendering Tutorial/source/DeferredRendering/FBORenderTexture.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/EntityFactory.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/AnimationManager.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/CollisionSystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/Animation2DSystem.h",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/SpriteSheetmanager.h",
		"/D/C++Projects/VS/3DEnjon/src/SpriteSheetManager.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/AnimationManager.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/Loot.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/PlayerControllerSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/proc/build.bat",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/PlayerControllerSystem.h",
		"/D/C++Projects/VS/3DEnjon/shaders/basic.f.glsl",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/Level.h",
		"/D/C++Projects/VS/3DEnjon/src/Timing.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/ComponentSystems.cpp",
		"/D/C++Projects/VS/3DEnjon/src/ParticleEngine2D.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/ParticleEngine2D.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/Effects.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/Masks.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/AttributeSystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/Transform3DSystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/ComponentSystems.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/VSQ.txt",
		"/D/C++Projects/VS/IsoARPG/src/Player.cpp",
		"/D/C++Projects/VS/IsoARPG/src/Game.cpp",
		"/D/C++Projects/VS/3DEnjon/src/FontManager.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/FontManager.h",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/Font.h",
		"/D/C++Projects/VS/3DEnjon/src/Font.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/EffectSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/EffectSystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/Loot.h",
		"/D/C++Projects/VS/3DEnjon/include/Math/Random.h",
		"/D/C++Projects/VS/3DEnjon/include/Utils/Timing.h",
		"/D/C++Projects/VS/3DEnjon/proc/rel.bat",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/AttributeSystem.cpp",
		"/C/Users/John/Desktop/Programming/Personal/Chess/Piece.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/Animation.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/Color.h",
		"/D/C++Projects/VS/3DEnjon/src/Sprite.cpp",
		"/D/C++Projects/VS/3DEnjon/src/Game.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/Vertex.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/SpatialHash.cpp",
		"/D/C++Projects/VS/3DEnjon/src/AABB.cpp",
		"/D/C++Projects/Tutorials/Help/main.c",
		"/D/Programs/Brogue/Brogue-windows-v1.7.4/Brogue Source/BrogueCode/Random.c",
		"/D/C++Projects/VS/3DEnjon/shaders/atlas.f.glsl",
		"/D/C++Projects/VS/3DEnjon/shaders/text.f.glsl",
		"/D/C++Projects/VS/3DEnjon/shaders/text.v.glsl",
		"/D/C++Projects/VS/3DEnjon/deps/include/STB/stb_truetype.h",
		"/D/C++Projects/VS/3DEnjon/proc/all.bat",
		"/D/C++Projects/VS/3DEnjon/proc/bd.bat",
		"/D/C++Projects/VS/3DEnjon/proc/proc/all",
		"/D/C++Projects/VS/3DEnjon/include/Game.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/main.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Math/Vec2.h",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/Window.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/SpatialHash.h",
		"/D/C++Projects/G++/Projects/ZombieChallenge/src/Player.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/SCRUM.txt",
		"/D/C++Projects/G++/Projects/ZombieChallenge/src/Game.cpp",
		"/D/C++Projects/G++/Projects/ZombieChallenge/src/Gun.cpp",
		"/D/C++Projects/G++/Projects/ZombieChallenge/src/Bullet.cpp",
		"/D/C++Projects/VS/3DEnjon/src/Camera2D.cpp",
		"/D/C++Projects/VS/3DEnjon/include/Graphics/Camera2D.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/AIControllerSystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/LabelSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/LabelSystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/InventorySystem.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/Renderer2DSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/Renderer2DSystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/InventorySystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/Entity.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/src/ECS/TestSystem.cpp",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/ECS/TestSystem.h",
		"/D/C++Projects/VS/3DEnjon/IsoARPG/include/Animation.h",
		"/D/C++Projects/VS/3DEnjon/include/Physics/AABB.h",
		"/D/C++Projects/VS/3DEnjon/include/Math/Maths.h",
		"/D/C++Projects/VS/3DEnjon/src/ImageLoader.cpp",
		"/D/C++Projects/VS/IsoARPG/src/Enemy.cpp"
	],
	"find":
	{
		"height": 57.0
	},
	"find_in_files":
	{
		"height": 127.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"bg-light",
			"BeamSegments.push",
			"2.0f",
			"50.0f",
			"BeamSegments.push",
			"BeamSegments.puh",
			"BeamSegments",
			"Enjon::Random::Roll(-10, 2) / 100.0f",
			"amountdrawn",
			"75.0f",
			"20",
			"10",
			"Box",
			"amountdrawn",
			"EntityFactory",
			"amountdrawn",
			"amountd",
			"amountda",
			"amountdrawn",
			"sin",
			"Debris",
			"Explosion",
			"amountdrawn",
			"amountdraw",
			"amountdrawn",
			"drawsmoke",
			"amountdrawn",
			"100",
			"amountdrawn",
			"auto L",
			"amountdrawn",
			"-0.75f",
			"amountdrawn",
			"400",
			"amountdrawn",
			"amount",
			"amountdrawn",
			"amountrdawn",
			"amountdraw",
			"amountdrawn",
			"Manager->AttributeSystem->Masks[e]",
			"amountdrawn",
			"1000",
			"getlights",
			"quadratic",
			"drawblood",
			"render",
			"L.at",
			"getlights",
			"new ",
			"getlights",
			"FPS",
			"drawbody",
			"LightZ",
			"drawsmoke",
			"NUM_LIGHTS",
			"LINEAR",
			"new EG::FrameBu",
			"view",
			"NUM_LIGHTS",
			"GetLights",
			"NUM_LIGHTS",
			"batch",
			"Batch",
			"batch",
			"cube",
			"1",
			"FULLSCREEN",
			"AmbientColor",
			"DrawSmoke",
			"Draw Cube",
			"LightColor",
			"quadratic",
			"GetLights",
			"NUM_LIGHTS",
			"print",
			"	}",
			"ProcessInput",
			"GetLights",
			"Radius",
			"FULLSCREE",
			"quadratic",
			"Radius",
			"LightZ",
			"DWidth * 0.64",
			"800",
			"GetLights",
			"sin(t)",
			"GetLights",
			"NUM_LIGHTS",
			"GetLights",
			"GroundTileBatch",
			"0",
			"FULLSCREEN",
			"AmbientColor",
			"#if 0",
			"#if 1",
			"TileBatch.",
			"GroundTileBatch",
			"Enjon::Math::",
			"Camera.",
			"m_velocity",
			"Math",
			"Camera.",
			"#if 0",
			"->",
			"DS",
			"time",
			"FBO",
			"SS",
			"DFBO",
			"DiffuseShader",
			"DiffuseFBO",
			"screenshader",
			"#if 1",
			"#if 0",
			"sin",
			"BS",
			"UIBatch",
			"Graphics",
			"HUDCamera->Init",
			"HUDCamera.Init",
			"HUDCAmera",
			"position",
			"DFBO",
			"CubeBatch",
			"#if 0",
			"amountdrawn"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 80955,
						"regions":
						{
							"bookmark_j":
							{
								"flags": 144,
								"regions":
								[
									[
										51226,
										51226
									]
								]
							},
							"bookmark_k":
							{
								"flags": 144,
								"regions":
								[
									[
										62277,
										62277
									]
								]
							},
							"bookmark_l":
							{
								"flags": 144,
								"regions":
								[
									[
										74047,
										74047
									]
								]
							}
						},
						"selection":
						[
							[
								16903,
								16903
							]
						],
						"settings":
						{
							"bs_sintax": "c",
							"buffer_scroll_name": "d9c9580e",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								6,
								20,
								19,
								17,
								0,
								0,
								0,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8041.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/ECS/CollisionSystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31726,
						"regions":
						{
						},
						"selection":
						[
							[
								22893,
								22893
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "82b72c48",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								15,
								15,
								44,
								43,
								13,
								75,
								100,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8937.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/ECS/Components.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4567,
						"regions":
						{
						},
						"selection":
						[
							[
								1485,
								1485
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "cae51f91",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								6,
								20,
								19,
								21,
								0,
								246,
								224,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 385.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "include/SpatialHash.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1374,
						"regions":
						{
						},
						"selection":
						[
							[
								255,
								255
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "31641c13",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								6,
								20,
								19,
								21,
								0,
								185,
								240,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "include/ECS/CollisionSystem.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1459,
						"regions":
						{
						},
						"selection":
						[
							[
								1296,
								1296
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "1c6d1cb4",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								15,
								15,
								43,
								19,
								12,
								101,
								172,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "include/ECS/Renderer2DSystem.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 591,
						"regions":
						{
						},
						"selection":
						[
							[
								315,
								315
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "4781296c",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								15,
								16,
								14,
								42,
								6,
								152,
								12,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/ECS/Transform3DSystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14104,
						"regions":
						{
						},
						"selection":
						[
							[
								2239,
								2239
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "c918a525",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								15,
								15,
								29,
								53,
								0,
								24,
								169,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 489.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "include/ECS/PlayerControllerSystem.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 992,
						"regions":
						{
						},
						"selection":
						[
							[
								198,
								198
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "3de0a795",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								15,
								15,
								4,
								47,
								12,
								237,
								119,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "include/ECS/Masks.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1107,
						"regions":
						{
						},
						"selection":
						[
							[
								58,
								58
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "8c8c6192",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								12,
								22,
								38,
								27,
								4,
								22,
								101,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/ECS/ComponentSystems.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4833,
						"regions":
						{
						},
						"selection":
						[
							[
								2642,
								2642
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "09bd5571",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								6,
								20,
								19,
								17,
								10,
								27,
								122,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 478.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/D/C++Projects/VS/3DEnjon/src/FrameBufferObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5293,
						"regions":
						{
						},
						"selection":
						[
							[
								3288,
								3288
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "0b78611b",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								3,
								7,
								9,
								42,
								25,
								2,
								138,
								171,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1287.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Level.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7128,
						"regions":
						{
						},
						"selection":
						[
							[
								4719,
								4719
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "8f6498e0",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								6,
								20,
								19,
								17,
								9,
								222,
								138,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2227.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "include/Level.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2516,
						"regions":
						{
						},
						"selection":
						[
							[
								358,
								358
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "0c53886a",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								6,
								20,
								19,
								21,
								0,
								185,
								240,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/ECS/Animation2DSystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15883,
						"regions":
						{
						},
						"selection":
						[
							[
								5639,
								5639
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "ab92de6d",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								15,
								15,
								59,
								33,
								5,
								161,
								248,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2065.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/ECS/PlayerControllerSystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10432,
						"regions":
						{
						},
						"selection":
						[
							[
								3638,
								3638
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "840bfab6",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								1,
								15,
								15,
								6,
								59,
								10,
								71,
								227,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1632.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/ECS/EntityFactory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13230,
						"regions":
						{
						},
						"selection":
						[
							[
								9849,
								9849
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "c2338e69",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								2,
								15,
								9,
								11,
								20,
								10,
								73,
								45,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4701.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "include/ECS/EntityFactory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2057,
						"regions":
						{
						},
						"selection":
						[
							[
								2046,
								2046
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "0009ccf9",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								2,
								15,
								9,
								8,
								57,
								5,
								141,
								133,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/D/C++Projects/VS/3DEnjon/src/SpriteSheetManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2042,
						"regions":
						{
						},
						"selection":
						[
							[
								1123,
								1123
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "9fb1f8c9",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								2,
								20,
								19,
								31,
								15,
								8,
								125,
								67,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/D/C++Projects/VS/3DEnjon/src/ShaderManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3206,
						"regions":
						{
						},
						"selection":
						[
							[
								199,
								199
							]
						],
						"settings":
						{
							"bs_sintax": "c++",
							"buffer_scroll_name": "3c173c30",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								223,
								11,
								15,
								11,
								10,
								4,
								12,
								85,
								67,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/D/C++Projects/VS/3DEnjon/shaders/diffuse.v.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 667,
						"regions":
						{
						},
						"selection":
						[
							[
								522,
								522
							]
						],
						"settings":
						{
							"bs_sintax": "plain text",
							"buffer_scroll_name": "d1046a2d",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								3,
								7,
								10,
								34,
								7,
								5,
								80,
								155,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/D/C++Projects/VS/3DEnjon/shaders/normal.v.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 660,
						"regions":
						{
						},
						"selection":
						[
							[
								317,
								317
							]
						],
						"settings":
						{
							"auto_name": "#version 330 core",
							"bs_sintax": "plain text",
							"buffer_scroll_name": "5dc904fc",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								3,
								18,
								8,
								18,
								43,
								8,
								242,
								49,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/D/C++Projects/VS/3DEnjon/shaders/normal.f.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 491,
						"regions":
						{
						},
						"selection":
						[
							[
								363,
								363
							]
						],
						"settings":
						{
							"bs_sintax": "plain text",
							"buffer_scroll_name": "eec44e26",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								3,
								8,
								13,
								20,
								1,
								11,
								99,
								109,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/D/C++Projects/VS/3DEnjon/shaders/deferred.v.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 310,
						"regions":
						{
						},
						"selection":
						[
							[
								266,
								266
							]
						],
						"settings":
						{
							"bs_sintax": "plain text",
							"buffer_scroll_name": "547f312b",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								3,
								7,
								10,
								58,
								1,
								13,
								233,
								220,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/D/C++Projects/VS/3DEnjon/shaders/deferred.f.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3570,
						"regions":
						{
						},
						"selection":
						[
							[
								2932,
								2932
							]
						],
						"settings":
						{
							"bs_sintax": "plain text",
							"buffer_scroll_name": "bb1c6867",
							"c_time":
							[
								128,
								3,
								99,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								100,
								97,
								116,
								101,
								116,
								105,
								109,
								101,
								10,
								113,
								0,
								67,
								10,
								7,
								224,
								3,
								7,
								10,
								58,
								13,
								7,
								94,
								37,
								113,
								1,
								133,
								113,
								2,
								82,
								113,
								3,
								46
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1097.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 57.0
	},
	"input":
	{
		"height": 46.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 138.0
	},
	"output.exec":
	{
		"height": 260.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/C++/C++ Single File.sublime-build",
	"project": "IsoARPGProject.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 293.0,
	"status_bar_visible": false,
	"template_settings":
	{
	}
}
