KEY_CODES: 
	- √ : ALT + 251

TODO:

Collisions:
	- √ Set up quadtrees/BSP 
	- √ Establish appropriate hit boxes for enemies and characters based on AABB struct 
	- √ Create AABB struct and place in either Transform system or a different physics system	
	- Different weapons will have different hit boxes
	- Refactor collision code even more
	- OBB collisions for rotated objects
	- Line collisions
	- Sphere vs. Box / Line collisions

Animations: 
	- Full character animation set for testing (Walking, Attacking)
	- Full enemy animation set for testing (Walking, Attacking, Death)

SpriteBatch:
	- Add Mask to each vertex for shader effects when rendering so to avoid using unnecessary shaders

Game Design:
	- Create overall game design flowchart
	- Implement myself as a mini-boss (game programmer boss!)

GamePlay: 
	- Design target system for ranged weapons

Systems: 
	- General:
		- Separate characters into layers: head gear, armor, legs, weapons, etc.
		- Vortex is created every frame that the right click is held. 

	- Effects:
		- √ Develop particle engine
	
	- AIController:
		- √ Look up and set Behavior Trees for entities

	- Renderer2D:
		- Set up rendering system
		- Renderer components will keep track of sprite batch pointers
		- Set up SpriteBatch manager
		- PostProcessing: 
			- √ Post Processing wraps the rendering code
			- √ Set up FrameBuffer to be written to and read from 	

	- Factory: 
		- If entity has a factory component, needs to use its own factory function

	- Entity: 
		- Every entity needs an OnDestroy function to handle all of its dependency cleanup as well as calling any other functions	

	- EntityManager:
		- √ Adding / Removing entities is busted. Fix it.

Editor:
	- Be able to integrate live editing (animations, level creation, particle effects) into game engine

	- Be able to create entity and drop into game for quick testing:
		- This includes being able to add/remove components and edit their properties
		- Need to be able to save this data out to JSON as well for later editing

	- Animation Editor:
		- √ Allow hot-loading of animations for editing 
		- √ Be able to save changes back out to json files that were loaded in then reload AnimManager

	- Behavior Tree Editor:
		- I have no idea how to go about this, but need to be able to do a behavior tree editor
		- Since the code for the behavior nodes needs to be defined in code, maybe just create a bunch of 
			stock behavior nodes that will be used and then can be chained together for different functionality
		
