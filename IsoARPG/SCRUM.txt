KEY_CODES: 
	- √ : ALT + 251

TODO:

Collisions:
	- √ Set up quadtrees/BSP 
	- √ Establish appropriate hit boxes for enemies and characters based on AABB struct 
	- √ Create AABB struct and place in either Transform system or a different physics system	
	- Different weapons will have different hit boxes
	- Refactor collision code even more
	- OBB collisions for rotated objects
	- Line collisions
	- Sphere vs. Box / Line collisions

Animations: 
	- Full character animation set for testing (Walking, Attacking)
	- Full enemy animation set for testing (Walking, Attacking, Death)

SpriteBatch:
	- Add Mask to each vertex for shader effects when rendering so to avoid using unnecessary shaders

Game Design:
	- Create overall game design flowchart
	- Implement myself as a mini-boss (game programmer boss!)

GamePlay: 
	- Design target system for ranged weapons

Systems: 
	- General:
		- Separate characters into layers: head gear, armor, legs, weapons, etc.

	- Effects:
		- √ Develop particle engine
	
	- AIController:
		- √ Look up and set Behavior Trees for entities

	- Renderer2D:
		- Set up rendering system
		- Renderer components will keep track of sprite batch pointers
		- Set up SpriteBatch manager
		- PostProcessing: 
			- √ Post Processing wraps the rendering code
			- √ Set up FrameBuffer to be written to and read from 	

	- Factory: 
		- If entity has a factory component, needs to use its own factory function

	- Entity: 
		- Every entity needs an OnDestroy function to handle all of its dependency cleanup as well as calling any other functions	

	- EntityManager:
		- √ Adding / Removing entities is busted. Fix it.

	- Debugging:
		- Create profiling system with options to turn on and off debug options
		- Create logging system to save debug logs to file as well as ability to render error messages to screen
		- World()->DebugPrintToScreen(const char* message), or something like that

Editor:
	- Be able to integrate live editing (animations, level creation, particle effects) into game engine
	- Create console for quickly executing commands

	- Archetype/Entity Editor:
		- Be able to create entity and drop into game for quick testing:
		- This includes being able to add/remove components and edit their properties
		- Need to be able to save this data out to JSON as well for later editing

	- Animation Editor:
		- √ Allow hot-loading of animations for editing 
		- √ Be able to save changes back out to json files that were loaded in then reload AnimManager

	- Behavior Tree Editor:
		- √ Create stock behaviors that can be loaded from script files to create behavior trees
		- Be able to edit behavior scripts in-game, save back to file and hot-load into AI
		- GUI based editor with drag and drop nodes with ability to edit data easily including parenting nodes
		- Ability to create new tree or edit existing one: 
			- Creating new tree:
				- Create Root
				- Add nodes through editing parenting system and if node is able to have child/children
				- Edit appropriate properties of nodes
				- Save tree:
					- Check whether name is valid (i.e. empty string):
						- If not, print error and don't save
					- Check whether or not tree exists:
						- If so, print warning and give option to save over or cancel save
					- Otherwise just save new tree
				- Load tree:
					- Select tree from drop down list of available trees from BTManager
					- Create Pre-Order Depth-First-Search (Rt-L-R) function to step through the BTree:
						- For each node, create and populate GUI node element with its appropriate data and link to parent

	- Event editor: 
		- Something similar to designing BluePrints or Events in UE4
		- Just like behavior trees, create a large group of stock functionalities that when strung together can be used to create complex lambdas through scripting
		- GUI based editor with drag and drop nodes with ability to edit data easily as well as parent actions easily

Known Bugs:
		- Vortex is created every frame that the right click is held. 












